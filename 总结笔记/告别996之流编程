1.实战案例：集合与流惭怍对比
	分别使用集合操作及Stream流操作，完成对实际应用场景中的数据处理。直观感受流操作带来的便捷性。

2.流是什么？
	1.JDK1.8引入的新成员，以声明式方式处理集合数据
	2.将基础操作链接起来，完成复杂的数据处理流水线
	3.提供透明的并行处理

3.流的简介
	从支持数据处理操作的源生成的元素序列
									--Java8实战

4.流与集合的区别
	1.时间与空间
		集合相当于DVD，只有把DVD放到机器里，才能观看整部电影；
		流相当于多媒体播放，你不用获取到电影的所有帧，只需要获取到当前正在观看的时间范围内的数据帧就可以
	---	集合更像是空间上的元素的存储；流更像是时间维度的元素的生成
	---	一般对流与集合的定位是，集合面向于的是存储，而流面向于计算
		如：构建一个质数集合，做不到，因为质数无限大；但要构建一个质数流就可以做到，因为在使用到一个质数的时候，实时的计算出这个质数就可以了。本质上还是时间与空间的区别
	-----质数的例子用filter就可以实现，因为filter是无状态的，和forEach结合就会一个一个打印出来
	2.只能遍历一次
		集合可以遍历多次，流只能遍历一次
	3.外部迭代与内部迭代

5.流的组成
	Cart -> filter -> sorted -> map -> collect
   数据源      中    间    操    作     终端操作

6.流操作分类
	中间操作(Intermediate) 
		无状态操作	- 	filter/map/peek等			(单个数据)
		有状态操作   -   dictinct/sorted/limit等		(所有数据)
	终端操作(Terminal)
		非短路操作   -   forEach/collect/count等		(每个数据都要执行)
		短路操作 	-	anyMatch/findFirst/findAny等(执行到符合的就结束)

	有状态操作和无状态操作区别：有状态操作需上一个操作全部执行完汇总之后才执行，无状态操作可以上一个数据执行完直接执行这个操作

7.流的使用
	中间操作(无状态)		中间操作(有状态)     终端操作(短路)	     终端操作(非短路)
	 过滤(filter)		 去重(distinct)	  所有匹配(allMatch)       遍历(forEach)
	 映射(map)			 跳过(skip)		  任意匹配(anyMatch)		  规约(reduce)
	 扁平化(flatMap)      截断(limit)      不匹配(noneMatch)		  最大值(max)
	 遍历(peek)			  排序(Sorted)     查找首个(findFirst)     聚合(collect)
	 									   查找任意(findAny)	      最小值(min)
	 									   						  计数(count)
8.流的构建
	1.由值创建流
	2.由数组创建流
	3.由文件生成流
	4.由函数生成流(无限流)

9.收集器简介
	1.将流中的元素累积成一个结果
	2.作用于终端操作collect()上
	3.collect/Collector/Collectors

10.collect/Collector/Collectors区别：
	collect是作为一个终端操作出现的，他是流收集的最后一个步骤，是一个方法;
	Collector是一个接口，collect这个方法需要接收一个实现了Collector接口的收集器才可以收集；
	Collectors是一个工具类，它封装了一些已经预制好的一些实现Collector接口的一些收集器
具体可以参考博文：https://www.cnblogs.com/V1haoge/p/10748925.html
	Collector是专门作为colllect方法的参数的，而Collectors是专门作为生产具体Collector的工具类

11.预定义收集器功能
	1.将流元素规约和汇总为一个值
	2.将流元素分组
	3.将流元素分区


