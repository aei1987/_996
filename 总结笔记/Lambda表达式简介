Lambda表达式简介
	1.Java8 引入函数式编程风格
		函数式编程：定义函数作为一等公民，可以赋值给变量作为参数或者返回值进行传递，而Lambda表达式就是Java引入的函数式编程的一次革命性的尝试
		突破了只有类作为头等公民的设计，将函数作为参数进行传递，在编程方式上提供了很大的便捷

		原因：在Java之后，JVM平台出现很多其他的编程语言，如Scala或者Kotlin，这种多范式的编程语言，相对来说，Java完全面向对象的编程就有些死板了，为了更适应开发者的需要，Java8开启了探索之路，而Lambda就是一次伟大的革命性的尝试

	2.可以理解为一种匿名函数的代替
	3.通过行为参数化传递代码

Lambda表达式的形式
	1.(parameters) -> expression
	2.(parameters) -> { statement;}

	形式一：没有参数
		() -> System.out.println("Hello world!");
	形式二：只有一个参数
		name -> System.out.println( "Hello World from" + name + " !");
	形式三：没有参数，逻辑复杂
		() -> {
				System.out.println(" Hello");
				System.out.println("World");
			}
	形式四：包含两个参数的方法
		BinaryOperator<Long> functionAdd = (x, y) -> x + y;
		Long result = functionAdd.apply(1L, 2L);
	形式五：对参数显示声明
		BinaryOperator<Long> functionAdd = (Long x, Long y) -> x + y;
		Long result = functionAdd.apply(1L, 2L);

函数式接口
	1.接口中只有一个抽象方法
	2.Java8 的函数式接口注解：@FunctionInterface
	3.函数式接口的抽象方法签名：函数描述符

实战案例：自定义函数式接口
	自定义函数式接口，实现读取本地文件后自定义处理逻辑功能